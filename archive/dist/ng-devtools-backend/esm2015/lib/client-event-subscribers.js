import { getLatestComponentState, queryDirectiveForest, updateState } from './component-tree';
import { parseRoutes } from './router-tree';
import { start as startProfiling, stop as stopProfiling } from './hooks/capture';
import { serializeDirectiveState } from './state-serializer/state-serializer';
import { ComponentInspector } from './component-inspector/component-inspector';
import { setConsoleReference } from './set-console-reference';
import { unHighlight } from './highlighter';
import { getAngularVersion, appIsAngularInDevMode, appIsSupportedAngularVersion, appIsAngularIvy, } from './angular-check';
import { debounceTime } from 'rxjs/operators';
import { disableTimingAPI, enableTimingAPI, initializeOrGetDirectiveForestHooks } from './hooks';
import { runOutsideAngular } from './utils';
export const subscribeToClientEvents = (messageBus) => {
    messageBus.on('shutdown', shutdownCallback(messageBus));
    messageBus.on('getLatestComponentExplorerView', getLatestComponentExplorerViewCallback(messageBus));
    messageBus.on('queryNgAvailability', checkForAngularCallback(messageBus));
    messageBus.on('startProfiling', startProfilingCallback(messageBus));
    messageBus.on('stopProfiling', stopProfilingCallback(messageBus));
    messageBus.on('setSelectedComponent', selectedComponentCallback);
    messageBus.on('getNestedProperties', getNestedPropertiesCallback(messageBus));
    messageBus.on('getRoutes', getRoutesCallback(messageBus));
    messageBus.on('updateState', updateState);
    messageBus.on('enableTimingAPI', enableTimingAPI);
    messageBus.on('disableTimingAPI', disableTimingAPI);
    if (appIsAngularInDevMode() && appIsSupportedAngularVersion() && appIsAngularIvy()) {
        setupInspector(messageBus);
        // Often websites have `scroll` event listener which triggers
        // Angular's change detection. We don't want to constantly send
        // update requests, instead we want to request an update at most
        // every 250ms
        runOutsideAngular(() => {
            initializeOrGetDirectiveForestHooks()
                .changeDetection$.pipe(debounceTime(250))
                .subscribe(() => messageBus.emit('componentTreeDirty'));
        });
    }
};
//
// Callback Definitions
//
const shutdownCallback = (messageBus) => () => {
    messageBus.destroy();
};
const getLatestComponentExplorerViewCallback = (messageBus) => (query) => {
    // We want to force re-indexing of the component tree.
    // Pressing the refresh button means the user saw stuck UI.
    initializeOrGetDirectiveForestHooks().indexForest();
    if (!query) {
        messageBus.emit('latestComponentExplorerView', [
            {
                forest: prepareForestForSerialization(initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest()),
            },
        ]);
        return;
    }
    messageBus.emit('latestComponentExplorerView', [
        {
            forest: prepareForestForSerialization(initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest()),
            properties: getLatestComponentState(query, initializeOrGetDirectiveForestHooks().getDirectiveForest()),
        },
    ]);
};
const checkForAngularCallback = (messageBus) => () => checkForAngular(messageBus);
const getRoutesCallback = (messageBus) => () => getRoutes(messageBus);
const startProfilingCallback = (messageBus) => () => startProfiling((frame) => {
    messageBus.emit('sendProfilerChunk', [frame]);
});
const stopProfilingCallback = (messageBus) => () => {
    messageBus.emit('profilerResults', [stopProfiling()]);
};
const selectedComponentCallback = (position) => {
    const node = queryDirectiveForest(position, initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest());
    setConsoleReference({ node, position });
};
const getNestedPropertiesCallback = (messageBus) => (position, propPath) => {
    const emitEmpty = () => messageBus.emit('nestedProperties', [position, { props: {} }, propPath]);
    const node = queryDirectiveForest(position.element, initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest());
    if (!node) {
        return emitEmpty();
    }
    const current = position.directive === undefined ? node.component : node.directives[position.directive];
    if (!current) {
        return emitEmpty();
    }
    let data = current.instance;
    for (const prop of propPath) {
        data = data[prop];
        if (!data) {
            console.error('Cannot access the properties', propPath, 'of', node);
        }
    }
    messageBus.emit('nestedProperties', [position, { props: serializeDirectiveState(data) }, propPath]);
};
//
// Subscribe Helpers
//
const getRoutes = (messageBus) => {
    var _a, _b;
    const node = queryDirectiveForest([0], initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest());
    let routes = [];
    if ((_a = node === null || node === void 0 ? void 0 : node.component) === null || _a === void 0 ? void 0 : _a.instance.router) {
        routes = [parseRoutes((_b = node === null || node === void 0 ? void 0 : node.component) === null || _b === void 0 ? void 0 : _b.instance.router)];
    }
    messageBus.emit('updateRouterTree', [routes]);
};
const checkForAngular = (messageBus) => {
    const ngVersion = getAngularVersion();
    const appIsIvy = appIsAngularIvy();
    if (!ngVersion) {
        setTimeout(() => checkForAngular(messageBus), 500);
        return;
    }
    if (appIsIvy) {
        initializeOrGetDirectiveForestHooks();
    }
    messageBus.emit('ngAvailability', [
        { version: ngVersion.toString(), devMode: appIsAngularInDevMode(), ivy: appIsIvy },
    ]);
};
const setupInspector = (messageBus) => {
    const inspector = new ComponentInspector({
        onComponentEnter: (id) => {
            messageBus.emit('highlightComponent', [id]);
        },
        onComponentLeave: () => {
            messageBus.emit('removeComponentHighlight');
        },
        onComponentSelect: (id) => {
            messageBus.emit('selectComponent', [id]);
        },
    });
    messageBus.on('inspectorStart', inspector.startInspecting);
    messageBus.on('inspectorEnd', inspector.stopInspecting);
    messageBus.on('createHighlightOverlay', (position) => {
        inspector.highlightByPosition(position);
    });
    messageBus.on('removeHighlightOverlay', unHighlight);
};
// Here we drop properties to prepare the tree for serialization.
// We don't need the component instance, so we just traverse the tree
// and leave the component name.
export const prepareForestForSerialization = (roots) => {
    return roots.map((node) => {
        return {
            element: node.element,
            component: node.component
                ? {
                    name: node.component.name,
                    isElement: node.component.isElement,
                    id: initializeOrGetDirectiveForestHooks().getDirectiveId(node.component.instance),
                }
                : null,
            directives: node.directives.map((d) => ({
                name: d.name,
                id: initializeOrGetDirectiveForestHooks().getDirectiveId(d.instance),
            })),
            children: prepareForestForSerialization(node.children),
        };
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LWV2ZW50LXN1YnNjcmliZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZGV2dG9vbHMtYmFja2VuZC9zcmMvbGliL2NsaWVudC1ldmVudC1zdWJzY3JpYmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxPQUFPLEVBQXFCLHVCQUF1QixFQUFFLG9CQUFvQixFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUFFLEtBQUssSUFBSSxjQUFjLEVBQUUsSUFBSSxJQUFJLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixxQkFBcUIsRUFDckIsNEJBQTRCLEVBQzVCLGVBQWUsR0FDaEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFNUMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxVQUE4QixFQUFRLEVBQUU7SUFDOUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUV4RCxV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QUFtQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7YUFDckUsQ0FBQyxDQUFDO1lBQ0gsUUFBUSxFQUFFLDZCQUE2QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdEIsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZVBvc2l0aW9uLFxuICBFbGVtZW50UG9zaXRpb24sXG4gIEV2ZW50cyxcbiAgTWVzc2FnZUJ1cyxcbiAgRGV2VG9vbHNOb2RlLFxuICBEaXJlY3RpdmVUeXBlLFxuICBDb21wb25lbnRUeXBlLFxuICBQcm9maWxlckZyYW1lLFxuICBDb21wb25lbnRFeHBsb3JlclZpZXdRdWVyeSxcbiAgUm91dGUsXG59IGZyb20gJ3Byb3RvY29sJztcbmltcG9ydCB7IENvbXBvbmVudFRyZWVOb2RlLCBnZXRMYXRlc3RDb21wb25lbnRTdGF0ZSwgcXVlcnlEaXJlY3RpdmVGb3Jlc3QsIHVwZGF0ZVN0YXRlIH0gZnJvbSAnLi9jb21wb25lbnQtdHJlZSc7XG5pbXBvcnQgeyBwYXJzZVJvdXRlcyB9IGZyb20gJy4vcm91dGVyLXRyZWUnO1xuaW1wb3J0IHsgc3RhcnQgYXMgc3RhcnRQcm9maWxpbmcsIHN0b3AgYXMgc3RvcFByb2ZpbGluZyB9IGZyb20gJy4vaG9va3MvY2FwdHVyZSc7XG5pbXBvcnQgeyBzZXJpYWxpemVEaXJlY3RpdmVTdGF0ZSB9IGZyb20gJy4vc3RhdGUtc2VyaWFsaXplci9zdGF0ZS1zZXJpYWxpemVyJztcbmltcG9ydCB7IENvbXBvbmVudEluc3BlY3RvciB9IGZyb20gJy4vY29tcG9uZW50LWluc3BlY3Rvci9jb21wb25lbnQtaW5zcGVjdG9yJztcbmltcG9ydCB7IHNldENvbnNvbGVSZWZlcmVuY2UgfSBmcm9tICcuL3NldC1jb25zb2xlLXJlZmVyZW5jZSc7XG5pbXBvcnQgeyB1bkhpZ2hsaWdodCB9IGZyb20gJy4vaGlnaGxpZ2h0ZXInO1xuaW1wb3J0IHtcbiAgZ2V0QW5ndWxhclZlcnNpb24sXG4gIGFwcElzQW5ndWxhckluRGV2TW9kZSxcbiAgYXBwSXNTdXBwb3J0ZWRBbmd1bGFyVmVyc2lvbixcbiAgYXBwSXNBbmd1bGFySXZ5LFxufSBmcm9tICcuL2FuZ3VsYXItY2hlY2snO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZGlzYWJsZVRpbWluZ0FQSSwgZW5hYmxlVGltaW5nQVBJLCBpbml0aWFsaXplT3JHZXREaXJlY3RpdmVGb3Jlc3RIb29rcyB9IGZyb20gJy4vaG9va3MnO1xuaW1wb3J0IHsgcnVuT3V0c2lkZUFuZ3VsYXIgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZVRvQ2xpZW50RXZlbnRzID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPik6IHZvaWQgPT4ge1xuICBtZXNzYWdlQnVzLm9uKCdzaHV0ZG93bicsIHNodXRkb3duQ2FsbGJhY2sobWVzc2FnZUJ1cykpO1xuXG4gIG1lc3NhZ2VCdXMub24oJ2dldExhdGVzdENvbXBvbmVudEV4cGxvcmVyVmlldycsIGdldExhdGVzdENvbXBvbmVudEV4cGxvcmVyVmlld0NhbGxiYWNrKG1lc3NhZ2VCdXMpKTtcblxuICBtZXNzYWdlQnVzLm9uKCdxdWVyeU5nQXZhaWxhYmlsaXR5JywgY2hlY2tGb3JBbmd1bGFyQ2FsbGJhY2sobWVzc2FnZUJ1cykpO1xuXG4gIG1lc3NhZ2VCdXMub24oJ3N0YXJ0UHJvZmlsaW5nJywgc3RhcnRQcm9maWxpbmdDYWxsYmFjayhtZXNzYWdlQnVzKSk7XG4gIG1lc3NhZ2VCdXMub24oJ3N0b3BQcm9maWxpbmcnLCBzdG9wUHJvZmlsaW5nQ2FsbGJhY2sobWVzc2FnZUJ1cykpO1xuXG4gIG1lc3NhZ2VCdXMub24oJ3NldFNlbGVjdGVkQ29tcG9uZW50Jywgc2VsZWN0ZWRDb21wb25lbnRDYWxsYmFjayk7XG5cbiAgbWVzc2FnZUJ1cy5vbignZ2V0TmVzdGVkUHJvcGVydGllcycsIGdldE5lc3RlZFByb3BlcnRpZXNDYWxsYmFjayhtZXNzYWdlQnVzKSk7XG4gIG1lc3NhZ2VCdXMub24oJ2dldFJvdXRlcycsIGdldFJvdXRlc0NhbGxiYWNrKG1lc3NhZ2VCdXMpKTtcblxuICBtZXNzYWdlQnVzLm9uKCd1cGRhdGVTdGF0ZScsIHVwZGF0ZVN0YXRlKTtcblxuICBtZXNzYWdlQnVzLm9uKCdlbmFibGVUaW1pbmdBUEknLCBlbmFibGVUaW1pbmdBUEkpO1xuICBtZXNzYWdlQnVzLm9uKCdkaXNhYmxlVGltaW5nQVBJJywgZGlzYWJsZVRpbWluZ0FQSSk7XG5cbiAgaWYgKGFwcElzQW5ndWxhckluRGV2TW9kZSgpICYmIGFwcElzU3VwcG9ydGVkQW5ndWxhclZlcnNpb24oKSAmJiBhcHBJc0FuZ3VsYXJJdnkoKSkge1xuICAgIHNldHVwSW5zcGVjdG9yKG1lc3NhZ2VCdXMpO1xuICAgIC8vIE9mdGVuIHdlYnNpdGVzIGhhdmUgYHNjcm9sbGAgZXZlbnQgbGlzdGVuZXIgd2hpY2ggdHJpZ2dlcnNcbiAgICAvLyBBbmd1bGFyJ3MgY2hhbmdlIGRldGVjdGlvbi4gV2UgZG9uJ3Qgd2FudCB0byBjb25zdGFudGx5IHNlbmRcbiAgICAvLyB1cGRhdGUgcmVxdWVzdHMsIGluc3RlYWQgd2Ugd2FudCB0byByZXF1ZXN0IGFuIHVwZGF0ZSBhdCBtb3N0XG4gICAgLy8gZXZlcnkgMjUwbXNcbiAgICBydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpbml0aWFsaXplT3JHZXREaXJlY3RpdmVGb3Jlc3RIb29rcygpXG4gICAgICAgIC5jaGFuZ2VEZXRlY3Rpb24kLnBpcGUoZGVib3VuY2VUaW1lKDI1MCkpXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gbWVzc2FnZUJ1cy5lbWl0KCdjb21wb25lbnRUcmVlRGlydHknKSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vXG4vLyBDYWxsYmFjayBEZWZpbml0aW9uc1xuLy9cblxuY29uc3Qgc2h1dGRvd25DYWxsYmFjayA9IChtZXNzYWdlQnVzOiBNZXNzYWdlQnVzPEV2ZW50cz4pID0+ICgpID0+IHtcbiAgbWVzc2FnZUJ1cy5kZXN0cm95KCk7XG59O1xuXG5jb25zdCBnZXRMYXRlc3RDb21wb25lbnRFeHBsb3JlclZpZXdDYWxsYmFjayA9IChtZXNzYWdlQnVzOiBNZXNzYWdlQnVzPEV2ZW50cz4pID0+IChcbiAgcXVlcnk/OiBDb21wb25lbnRFeHBsb3JlclZpZXdRdWVyeVxuKSA9PiB7XG4gIC8vIFdlIHdhbnQgdG8gZm9yY2UgcmUtaW5kZXhpbmcgb2YgdGhlIGNvbXBvbmVudCB0cmVlLlxuICAvLyBQcmVzc2luZyB0aGUgcmVmcmVzaCBidXR0b24gbWVhbnMgdGhlIHVzZXIgc2F3IHN0dWNrIFVJLlxuXG4gIGluaXRpYWxpemVPckdldERpcmVjdGl2ZUZvcmVzdEhvb2tzKCkuaW5kZXhGb3Jlc3QoKTtcblxuICBpZiAoIXF1ZXJ5KSB7XG4gICAgbWVzc2FnZUJ1cy5lbWl0KCdsYXRlc3RDb21wb25lbnRFeHBsb3JlclZpZXcnLCBbXG4gICAgICB7XG4gICAgICAgIGZvcmVzdDogcHJlcGFyZUZvcmVzdEZvclNlcmlhbGl6YXRpb24oaW5pdGlhbGl6ZU9yR2V0RGlyZWN0aXZlRm9yZXN0SG9va3MoKS5nZXRJbmRleGVkRGlyZWN0aXZlRm9yZXN0KCkpLFxuICAgICAgfSxcbiAgICBdKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbWVzc2FnZUJ1cy5lbWl0KCdsYXRlc3RDb21wb25lbnRFeHBsb3JlclZpZXcnLCBbXG4gICAge1xuICAgICAgZm9yZXN0OiBwcmVwYXJlRm9yZXN0Rm9yU2VyaWFsaXphdGlvbihpbml0aWFsaXplT3JHZXREaXJlY3RpdmVGb3Jlc3RIb29rcygpLmdldEluZGV4ZWREaXJlY3RpdmVGb3Jlc3QoKSksXG4gICAgICBwcm9wZXJ0aWVzOiBnZXRMYXRlc3RDb21wb25lbnRTdGF0ZShxdWVyeSwgaW5pdGlhbGl6ZU9yR2V0RGlyZWN0aXZlRm9yZXN0SG9va3MoKS5nZXREaXJlY3RpdmVGb3Jlc3QoKSksXG4gICAgfSxcbiAgXSk7XG59O1xuXG5jb25zdCBjaGVja0ZvckFuZ3VsYXJDYWxsYmFjayA9IChtZXNzYWdlQnVzOiBNZXNzYWdlQnVzPEV2ZW50cz4pID0+ICgpID0+IGNoZWNrRm9yQW5ndWxhcihtZXNzYWdlQnVzKTtcbmNvbnN0IGdldFJvdXRlc0NhbGxiYWNrID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPikgPT4gKCkgPT4gZ2V0Um91dGVzKG1lc3NhZ2VCdXMpO1xuXG5jb25zdCBzdGFydFByb2ZpbGluZ0NhbGxiYWNrID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPikgPT4gKCkgPT5cbiAgc3RhcnRQcm9maWxpbmcoKGZyYW1lOiBQcm9maWxlckZyYW1lKSA9PiB7XG4gICAgbWVzc2FnZUJ1cy5lbWl0KCdzZW5kUHJvZmlsZXJDaHVuaycsIFtmcmFtZV0pO1xuICB9KTtcblxuY29uc3Qgc3RvcFByb2ZpbGluZ0NhbGxiYWNrID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPikgPT4gKCkgPT4ge1xuICBtZXNzYWdlQnVzLmVtaXQoJ3Byb2ZpbGVyUmVzdWx0cycsIFtzdG9wUHJvZmlsaW5nKCldKTtcbn07XG5cbmNvbnN0IHNlbGVjdGVkQ29tcG9uZW50Q2FsbGJhY2sgPSAocG9zaXRpb246IEVsZW1lbnRQb3NpdGlvbikgPT4ge1xuICBjb25zdCBub2RlID0gcXVlcnlEaXJlY3RpdmVGb3Jlc3QocG9zaXRpb24sIGluaXRpYWxpemVPckdldERpcmVjdGl2ZUZvcmVzdEhvb2tzKCkuZ2V0SW5kZXhlZERpcmVjdGl2ZUZvcmVzdCgpKTtcbiAgc2V0Q29uc29sZVJlZmVyZW5jZSh7IG5vZGUsIHBvc2l0aW9uIH0pO1xufTtcblxuY29uc3QgZ2V0TmVzdGVkUHJvcGVydGllc0NhbGxiYWNrID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPikgPT4gKFxuICBwb3NpdGlvbjogRGlyZWN0aXZlUG9zaXRpb24sXG4gIHByb3BQYXRoOiBzdHJpbmdbXVxuKSA9PiB7XG4gIGNvbnN0IGVtaXRFbXB0eSA9ICgpID0+IG1lc3NhZ2VCdXMuZW1pdCgnbmVzdGVkUHJvcGVydGllcycsIFtwb3NpdGlvbiwgeyBwcm9wczoge30gfSwgcHJvcFBhdGhdKTtcbiAgY29uc3Qgbm9kZSA9IHF1ZXJ5RGlyZWN0aXZlRm9yZXN0KFxuICAgIHBvc2l0aW9uLmVsZW1lbnQsXG4gICAgaW5pdGlhbGl6ZU9yR2V0RGlyZWN0aXZlRm9yZXN0SG9va3MoKS5nZXRJbmRleGVkRGlyZWN0aXZlRm9yZXN0KClcbiAgKTtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIGVtaXRFbXB0eSgpO1xuICB9XG4gIGNvbnN0IGN1cnJlbnQgPSBwb3NpdGlvbi5kaXJlY3RpdmUgPT09IHVuZGVmaW5lZCA/IG5vZGUuY29tcG9uZW50IDogbm9kZS5kaXJlY3RpdmVzW3Bvc2l0aW9uLmRpcmVjdGl2ZV07XG4gIGlmICghY3VycmVudCkge1xuICAgIHJldHVybiBlbWl0RW1wdHkoKTtcbiAgfVxuICBsZXQgZGF0YSA9IGN1cnJlbnQuaW5zdGFuY2U7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wUGF0aCkge1xuICAgIGRhdGEgPSBkYXRhW3Byb3BdO1xuICAgIGlmICghZGF0YSkge1xuICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGFjY2VzcyB0aGUgcHJvcGVydGllcycsIHByb3BQYXRoLCAnb2YnLCBub2RlKTtcbiAgICB9XG4gIH1cbiAgbWVzc2FnZUJ1cy5lbWl0KCduZXN0ZWRQcm9wZXJ0aWVzJywgW3Bvc2l0aW9uLCB7IHByb3BzOiBzZXJpYWxpemVEaXJlY3RpdmVTdGF0ZShkYXRhKSB9LCBwcm9wUGF0aF0pO1xufTtcblxuLy9cbi8vIFN1YnNjcmliZSBIZWxwZXJzXG4vL1xuY29uc3QgZ2V0Um91dGVzID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPikgPT4ge1xuICBjb25zdCBub2RlID0gcXVlcnlEaXJlY3RpdmVGb3Jlc3QoWzBdLCBpbml0aWFsaXplT3JHZXREaXJlY3RpdmVGb3Jlc3RIb29rcygpLmdldEluZGV4ZWREaXJlY3RpdmVGb3Jlc3QoKSk7XG4gIGxldCByb3V0ZXM6IFJvdXRlW10gPSBbXTtcbiAgaWYgKG5vZGU/LmNvbXBvbmVudD8uaW5zdGFuY2Uucm91dGVyKSB7XG4gICAgcm91dGVzID0gW3BhcnNlUm91dGVzKG5vZGU/LmNvbXBvbmVudD8uaW5zdGFuY2Uucm91dGVyKV07XG4gIH1cbiAgbWVzc2FnZUJ1cy5lbWl0KCd1cGRhdGVSb3V0ZXJUcmVlJywgW3JvdXRlc10pO1xufTtcblxuY29uc3QgY2hlY2tGb3JBbmd1bGFyID0gKG1lc3NhZ2VCdXM6IE1lc3NhZ2VCdXM8RXZlbnRzPik6IHZvaWQgPT4ge1xuICBjb25zdCBuZ1ZlcnNpb24gPSBnZXRBbmd1bGFyVmVyc2lvbigpO1xuICBjb25zdCBhcHBJc0l2eSA9IGFwcElzQW5ndWxhckl2eSgpO1xuICBpZiAoIW5nVmVyc2lvbikge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gY2hlY2tGb3JBbmd1bGFyKG1lc3NhZ2VCdXMpLCA1MDApO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYXBwSXNJdnkpIHtcbiAgICBpbml0aWFsaXplT3JHZXREaXJlY3RpdmVGb3Jlc3RIb29rcygpO1xuICB9XG4gIG1lc3NhZ2VCdXMuZW1pdCgnbmdBdmFpbGFiaWxpdHknLCBbXG4gICAgeyB2ZXJzaW9uOiBuZ1ZlcnNpb24udG9TdHJpbmcoKSwgZGV2TW9kZTogYXBwSXNBbmd1bGFySW5EZXZNb2RlKCksIGl2eTogYXBwSXNJdnkgfSxcbiAgXSk7XG59O1xuXG5jb25zdCBzZXR1cEluc3BlY3RvciA9IChtZXNzYWdlQnVzOiBNZXNzYWdlQnVzPEV2ZW50cz4pID0+IHtcbiAgY29uc3QgaW5zcGVjdG9yID0gbmV3IENvbXBvbmVudEluc3BlY3Rvcih7XG4gICAgb25Db21wb25lbnRFbnRlcjogKGlkOiBudW1iZXIpID0+IHtcbiAgICAgIG1lc3NhZ2VCdXMuZW1pdCgnaGlnaGxpZ2h0Q29tcG9uZW50JywgW2lkXSk7XG4gICAgfSxcbiAgICBvbkNvbXBvbmVudExlYXZlOiAoKSA9PiB7XG4gICAgICBtZXNzYWdlQnVzLmVtaXQoJ3JlbW92ZUNvbXBvbmVudEhpZ2hsaWdodCcpO1xuICAgIH0sXG4gICAgb25Db21wb25lbnRTZWxlY3Q6IChpZDogbnVtYmVyKSA9PiB7XG4gICAgICBtZXNzYWdlQnVzLmVtaXQoJ3NlbGVjdENvbXBvbmVudCcsIFtpZF0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIG1lc3NhZ2VCdXMub24oJ2luc3BlY3RvclN0YXJ0JywgaW5zcGVjdG9yLnN0YXJ0SW5zcGVjdGluZyk7XG4gIG1lc3NhZ2VCdXMub24oJ2luc3BlY3RvckVuZCcsIGluc3BlY3Rvci5zdG9wSW5zcGVjdGluZyk7XG5cbiAgbWVzc2FnZUJ1cy5vbignY3JlYXRlSGlnaGxpZ2h0T3ZlcmxheScsIChwb3NpdGlvbjogRWxlbWVudFBvc2l0aW9uKSA9PiB7XG4gICAgaW5zcGVjdG9yLmhpZ2hsaWdodEJ5UG9zaXRpb24ocG9zaXRpb24pO1xuICB9KTtcbiAgbWVzc2FnZUJ1cy5vbigncmVtb3ZlSGlnaGxpZ2h0T3ZlcmxheScsIHVuSGlnaGxpZ2h0KTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXphYmxlRGlyZWN0aXZlSW5zdGFuY2VUeXBlIGV4dGVuZHMgRGlyZWN0aXZlVHlwZSB7XG4gIGlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXphYmxlQ29tcG9uZW50SW5zdGFuY2VUeXBlIGV4dGVuZHMgQ29tcG9uZW50VHlwZSB7XG4gIGlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXphYmxlQ29tcG9uZW50VHJlZU5vZGVcbiAgZXh0ZW5kcyBEZXZUb29sc05vZGU8U2VyaWFsaXphYmxlRGlyZWN0aXZlSW5zdGFuY2VUeXBlLCBTZXJpYWxpemFibGVDb21wb25lbnRJbnN0YW5jZVR5cGU+IHtcbiAgY2hpbGRyZW46IFNlcmlhbGl6YWJsZUNvbXBvbmVudFRyZWVOb2RlW107XG59XG5cbi8vIEhlcmUgd2UgZHJvcCBwcm9wZXJ0aWVzIHRvIHByZXBhcmUgdGhlIHRyZWUgZm9yIHNlcmlhbGl6YXRpb24uXG4vLyBXZSBkb24ndCBuZWVkIHRoZSBjb21wb25lbnQgaW5zdGFuY2UsIHNvIHdlIGp1c3QgdHJhdmVyc2UgdGhlIHRyZWVcbi8vIGFuZCBsZWF2ZSB0aGUgY29tcG9uZW50IG5hbWUuXG5leHBvcnQgY29uc3QgcHJlcGFyZUZvcmVzdEZvclNlcmlhbGl6YXRpb24gPSAocm9vdHM6IENvbXBvbmVudFRyZWVOb2RlW10pOiBTZXJpYWxpemFibGVDb21wb25lbnRUcmVlTm9kZVtdID0+IHtcbiAgcmV0dXJuIHJvb3RzLm1hcCgobm9kZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBlbGVtZW50OiBub2RlLmVsZW1lbnQsXG4gICAgICBjb21wb25lbnQ6IG5vZGUuY29tcG9uZW50XG4gICAgICAgID8ge1xuICAgICAgICAgICAgbmFtZTogbm9kZS5jb21wb25lbnQubmFtZSxcbiAgICAgICAgICAgIGlzRWxlbWVudDogbm9kZS5jb21wb25lbnQuaXNFbGVtZW50LFxuICAgICAgICAgICAgaWQ6IGluaXRpYWxpemVPckdldERpcmVjdGl2ZUZvcmVzdEhvb2tzKCkuZ2V0RGlyZWN0aXZlSWQobm9kZS5jb21wb25lbnQuaW5zdGFuY2UpLFxuICAgICAgICAgIH1cbiAgICAgICAgOiBudWxsLFxuICAgICAgZGlyZWN0aXZlczogbm9kZS5kaXJlY3RpdmVzLm1hcCgoZCkgPT4gKHtcbiAgICAgICAgbmFtZTogZC5uYW1lLFxuICAgICAgICBpZDogaW5pdGlhbGl6ZU9yR2V0RGlyZWN0aXZlRm9yZXN0SG9va3MoKS5nZXREaXJlY3RpdmVJZChkLmluc3RhbmNlKSxcbiAgICAgIH0pKSxcbiAgICAgIGNoaWxkcmVuOiBwcmVwYXJlRm9yZXN0Rm9yU2VyaWFsaXphdGlvbihub2RlLmNoaWxkcmVuKSxcbiAgICB9IGFzIFNlcmlhbGl6YWJsZUNvbXBvbmVudFRyZWVOb2RlO1xuICB9KTtcbn07XG4iXX0=