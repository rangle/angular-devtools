import { getDirectiveName } from '../highlighter';
import { DirectiveForestHooks } from './hooks';
const markName = (s, method) => `🅰️ ${s}#${method}`;
const supportsPerformance = globalThis.performance && typeof globalThis.performance.getEntriesByName === 'function';
const recordMark = (s, method) => {
    if (supportsPerformance) {
        performance.mark(`${markName(s, method)}_start`);
    }
};
const endMark = (nodeName, method) => {
    if (supportsPerformance) {
        const name = markName(nodeName, method);
        const start = `${name}_start`;
        const end = `${name}_end`;
        if (performance.getEntriesByName(start).length > 0) {
            performance.mark(end);
            performance.measure(name, start, end);
        }
        performance.clearMarks(start);
        performance.clearMarks(end);
        performance.clearMeasures(name);
    }
};
let timingAPIFlag = false;
export const enableTimingAPI = () => (timingAPIFlag = true);
export const disableTimingAPI = () => (timingAPIFlag = false);
const timingAPIEnabled = () => timingAPIFlag;
export let directiveForestHooks;
export const initializeOrGetDirectiveForestHooks = () => {
    if (directiveForestHooks) {
        return directiveForestHooks;
    }
    directiveForestHooks = new DirectiveForestHooks({
        onChangeDetectionStart(component) {
            if (!timingAPIEnabled()) {
                return;
            }
            recordMark(getDirectiveName(component), 'changeDetection');
        },
        onChangeDetectionEnd(component) {
            if (!timingAPIEnabled()) {
                return;
            }
            endMark(getDirectiveName(component), 'changeDetection');
        },
        onLifecycleHookStart(component, lifecyle) {
            if (!timingAPIEnabled()) {
                return;
            }
            recordMark(getDirectiveName(component), lifecyle);
        },
        onLifecycleHookEnd(component, lifecyle) {
            if (!timingAPIEnabled()) {
                return;
            }
            endMark(getDirectiveName(component), lifecyle);
        },
    });
    directiveForestHooks.initialize();
    return directiveForestHooks;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1kZXZ0b29scy1iYWNrZW5kL3NyYy9saWIvaG9va3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRy9DLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBUyxFQUFFLE1BQWMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxFQUFFLENBQUM7QUFFckUsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUMsV0FBVyxJQUFJLE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLENBQUM7QUFJcEgsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFTLEVBQUUsTUFBYyxFQUFFLEVBQUU7SUFDL0MsSUFBSSxtQkFBbUIsRUFBRTtRQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbEQ7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRyxDQUFDLFFBQWdCLEVBQUUsTUFBYyxFQUFFLEVBQUU7SUFDbkQsSUFBSSxtQkFBbUIsRUFBRTtRQUN2QixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUM7UUFDOUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQztRQUMxQixJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2xELFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7QUFDSCxDQUFDLENBQUM7QUFFRixJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFFMUIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBRTlELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0FBRTdDLE1BQU0sQ0FBQyxJQUFJLG9CQUEwQyxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHLEdBQUcsRUFBRTtJQUN0RCxJQUFJLG9CQUFvQixFQUFFO1FBQ3hCLE9BQU8sb0JBQW9CLENBQUM7S0FDN0I7SUFDRCxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixDQUFDO1FBQzlDLHNCQUFzQixDQUFDLFNBQWM7WUFDbkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7Z0JBQ3ZCLE9BQU87YUFDUjtZQUNELFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFDRCxvQkFBb0IsQ0FBQyxTQUFjO1lBQ2pDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO2dCQUN2QixPQUFPO2FBQ1I7WUFDRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQ0Qsb0JBQW9CLENBQUMsU0FBYyxFQUFFLFFBQWdDO1lBQ25FLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO2dCQUN2QixPQUFPO2FBQ1I7WUFDRCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNELGtCQUFrQixDQUFDLFNBQWMsRUFBRSxRQUFnQztZQUNqRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtnQkFDdkIsT0FBTzthQUNSO1lBQ0QsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pELENBQUM7S0FDRixDQUFDLENBQUM7SUFDSCxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNsQyxPQUFPLG9CQUFvQixDQUFDO0FBQzlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldERpcmVjdGl2ZU5hbWUgfSBmcm9tICcuLi9oaWdobGlnaHRlcic7XG5pbXBvcnQgeyBEaXJlY3RpdmVGb3Jlc3RIb29rcyB9IGZyb20gJy4vaG9va3MnO1xuaW1wb3J0IHsgTGlmZWN5Y2xlUHJvZmlsZSB9IGZyb20gJ3Byb3RvY29sJztcblxuY29uc3QgbWFya05hbWUgPSAoczogc3RyaW5nLCBtZXRob2Q6IE1ldGhvZCkgPT4gYPCfhbDvuI8gJHtzfSMke21ldGhvZH1gO1xuXG5jb25zdCBzdXBwb3J0c1BlcmZvcm1hbmNlID0gZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZSAmJiB0eXBlb2YgZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lID09PSAnZnVuY3Rpb24nO1xuXG50eXBlIE1ldGhvZCA9IGtleW9mIExpZmVjeWNsZVByb2ZpbGUgfCAnY2hhbmdlRGV0ZWN0aW9uJztcblxuY29uc3QgcmVjb3JkTWFyayA9IChzOiBzdHJpbmcsIG1ldGhvZDogTWV0aG9kKSA9PiB7XG4gIGlmIChzdXBwb3J0c1BlcmZvcm1hbmNlKSB7XG4gICAgcGVyZm9ybWFuY2UubWFyayhgJHttYXJrTmFtZShzLCBtZXRob2QpfV9zdGFydGApO1xuICB9XG59O1xuXG5jb25zdCBlbmRNYXJrID0gKG5vZGVOYW1lOiBzdHJpbmcsIG1ldGhvZDogTWV0aG9kKSA9PiB7XG4gIGlmIChzdXBwb3J0c1BlcmZvcm1hbmNlKSB7XG4gICAgY29uc3QgbmFtZSA9IG1hcmtOYW1lKG5vZGVOYW1lLCBtZXRob2QpO1xuICAgIGNvbnN0IHN0YXJ0ID0gYCR7bmFtZX1fc3RhcnRgO1xuICAgIGNvbnN0IGVuZCA9IGAke25hbWV9X2VuZGA7XG4gICAgaWYgKHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoc3RhcnQpLmxlbmd0aCA+IDApIHtcbiAgICAgIHBlcmZvcm1hbmNlLm1hcmsoZW5kKTtcbiAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUobmFtZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3Moc3RhcnQpO1xuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoZW5kKTtcbiAgICBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzKG5hbWUpO1xuICB9XG59O1xuXG5sZXQgdGltaW5nQVBJRmxhZyA9IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgZW5hYmxlVGltaW5nQVBJID0gKCkgPT4gKHRpbWluZ0FQSUZsYWcgPSB0cnVlKTtcbmV4cG9ydCBjb25zdCBkaXNhYmxlVGltaW5nQVBJID0gKCkgPT4gKHRpbWluZ0FQSUZsYWcgPSBmYWxzZSk7XG5cbmNvbnN0IHRpbWluZ0FQSUVuYWJsZWQgPSAoKSA9PiB0aW1pbmdBUElGbGFnO1xuXG5leHBvcnQgbGV0IGRpcmVjdGl2ZUZvcmVzdEhvb2tzOiBEaXJlY3RpdmVGb3Jlc3RIb29rcztcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplT3JHZXREaXJlY3RpdmVGb3Jlc3RIb29rcyA9ICgpID0+IHtcbiAgaWYgKGRpcmVjdGl2ZUZvcmVzdEhvb2tzKSB7XG4gICAgcmV0dXJuIGRpcmVjdGl2ZUZvcmVzdEhvb2tzO1xuICB9XG4gIGRpcmVjdGl2ZUZvcmVzdEhvb2tzID0gbmV3IERpcmVjdGl2ZUZvcmVzdEhvb2tzKHtcbiAgICBvbkNoYW5nZURldGVjdGlvblN0YXJ0KGNvbXBvbmVudDogYW55KTogdm9pZCB7XG4gICAgICBpZiAoIXRpbWluZ0FQSUVuYWJsZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZWNvcmRNYXJrKGdldERpcmVjdGl2ZU5hbWUoY29tcG9uZW50KSwgJ2NoYW5nZURldGVjdGlvbicpO1xuICAgIH0sXG4gICAgb25DaGFuZ2VEZXRlY3Rpb25FbmQoY29tcG9uZW50OiBhbnkpOiB2b2lkIHtcbiAgICAgIGlmICghdGltaW5nQVBJRW5hYmxlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVuZE1hcmsoZ2V0RGlyZWN0aXZlTmFtZShjb21wb25lbnQpLCAnY2hhbmdlRGV0ZWN0aW9uJyk7XG4gICAgfSxcbiAgICBvbkxpZmVjeWNsZUhvb2tTdGFydChjb21wb25lbnQ6IGFueSwgbGlmZWN5bGU6IGtleW9mIExpZmVjeWNsZVByb2ZpbGUpOiB2b2lkIHtcbiAgICAgIGlmICghdGltaW5nQVBJRW5hYmxlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlY29yZE1hcmsoZ2V0RGlyZWN0aXZlTmFtZShjb21wb25lbnQpLCBsaWZlY3lsZSk7XG4gICAgfSxcbiAgICBvbkxpZmVjeWNsZUhvb2tFbmQoY29tcG9uZW50OiBhbnksIGxpZmVjeWxlOiBrZXlvZiBMaWZlY3ljbGVQcm9maWxlKTogdm9pZCB7XG4gICAgICBpZiAoIXRpbWluZ0FQSUVuYWJsZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbmRNYXJrKGdldERpcmVjdGl2ZU5hbWUoY29tcG9uZW50KSwgbGlmZWN5bGUpO1xuICAgIH0sXG4gIH0pO1xuICBkaXJlY3RpdmVGb3Jlc3RIb29rcy5pbml0aWFsaXplKCk7XG4gIHJldHVybiBkaXJlY3RpdmVGb3Jlc3RIb29rcztcbn07XG4iXX0=