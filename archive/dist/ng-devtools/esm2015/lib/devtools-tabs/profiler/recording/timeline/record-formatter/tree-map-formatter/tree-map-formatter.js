import { __decorate } from "tslib";
import { RecordFormatter } from '../record-formatter';
import memo from 'memo-decorator';
export class TreeMapFormatter extends RecordFormatter {
    formatFrame(record) {
        const children = [];
        this.addFrame(children, record.directives);
        const size = children.reduce((accum, curr) => {
            return accum + curr.size;
        }, 0);
        return {
            id: 'Application',
            size,
            value: size,
            children,
            original: null,
        };
    }
    addFrame(nodes, elements, prev = null) {
        elements.forEach((element) => {
            if (!element) {
                console.error('Unable to insert undefined element');
                return;
            }
            const nodeVal = super.getValue(element);
            const node = {
                id: super.getLabel(element),
                size: nodeVal,
                value: nodeVal,
                children: [],
                original: element,
            };
            this.addFrame(node.children, element.children, node);
            if (prev) {
                prev.size += node.size;
            }
            nodes.push(node);
        });
    }
}
__decorate([
    memo({ cache: new WeakMap() })
], TreeMapFormatter.prototype, "formatFrame", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1tYXAtZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZGV2dG9vbHMvc3JjL2xpYi9kZXZ0b29scy10YWJzL3Byb2ZpbGVyL3JlY29yZGluZy90aW1lbGluZS9yZWNvcmQtZm9ybWF0dGVyL3RyZWUtbWFwLWZvcm1hdHRlci90cmVlLW1hcC1mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQVVsQyxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsZUFBNEI7SUFFaEUsV0FBVyxDQUFDLE1BQXFCO1FBQy9CLE1BQU0sUUFBUSxHQUFrQixFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDM0MsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMzQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDTixPQUFPO1lBQ0wsRUFBRSxFQUFFLGFBQWE7WUFDakIsSUFBSTtZQUNKLEtBQUssRUFBRSxJQUFJO1lBQ1gsUUFBUTtZQUNSLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBb0IsRUFBRSxRQUEwQixFQUFFLE9BQTJCLElBQUk7UUFDeEYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO2dCQUNwRCxPQUFPO2FBQ1I7WUFDRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSxHQUFnQjtnQkFDeEIsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2dCQUMzQixJQUFJLEVBQUUsT0FBTztnQkFDYixLQUFLLEVBQUUsT0FBTztnQkFDZCxRQUFRLEVBQUUsRUFBRTtnQkFDWixRQUFRLEVBQUUsT0FBTzthQUNsQixDQUFDO1lBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ3hCO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXBDQztJQURDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUM7bURBYzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjb3JkRm9ybWF0dGVyIH0gZnJvbSAnLi4vcmVjb3JkLWZvcm1hdHRlcic7XG5pbXBvcnQgeyBFbGVtZW50UHJvZmlsZSwgUHJvZmlsZXJGcmFtZSB9IGZyb20gJ3Byb3RvY29sJztcbmltcG9ydCBtZW1vIGZyb20gJ21lbW8tZGVjb3JhdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmVlTWFwTm9kZSB7XG4gIGlkOiBzdHJpbmc7XG4gIHZhbHVlOiBudW1iZXI7XG4gIHNpemU6IG51bWJlcjtcbiAgY2hpbGRyZW46IFRyZWVNYXBOb2RlW107XG4gIG9yaWdpbmFsOiBFbGVtZW50UHJvZmlsZSB8IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmVlTWFwRm9ybWF0dGVyIGV4dGVuZHMgUmVjb3JkRm9ybWF0dGVyPFRyZWVNYXBOb2RlPiB7XG4gIEBtZW1vKHsgY2FjaGU6IG5ldyBXZWFrTWFwKCkgfSlcbiAgZm9ybWF0RnJhbWUocmVjb3JkOiBQcm9maWxlckZyYW1lKTogVHJlZU1hcE5vZGUge1xuICAgIGNvbnN0IGNoaWxkcmVuOiBUcmVlTWFwTm9kZVtdID0gW107XG4gICAgdGhpcy5hZGRGcmFtZShjaGlsZHJlbiwgcmVjb3JkLmRpcmVjdGl2ZXMpO1xuICAgIGNvbnN0IHNpemUgPSBjaGlsZHJlbi5yZWR1Y2UoKGFjY3VtLCBjdXJyKSA9PiB7XG4gICAgICByZXR1cm4gYWNjdW0gKyBjdXJyLnNpemU7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiAnQXBwbGljYXRpb24nLFxuICAgICAgc2l6ZSxcbiAgICAgIHZhbHVlOiBzaXplLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBvcmlnaW5hbDogbnVsbCxcbiAgICB9O1xuICB9XG5cbiAgYWRkRnJhbWUobm9kZXM6IFRyZWVNYXBOb2RlW10sIGVsZW1lbnRzOiBFbGVtZW50UHJvZmlsZVtdLCBwcmV2OiBUcmVlTWFwTm9kZSB8IG51bGwgPSBudWxsKTogdm9pZCB7XG4gICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBpbnNlcnQgdW5kZWZpbmVkIGVsZW1lbnQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgbm9kZVZhbCA9IHN1cGVyLmdldFZhbHVlKGVsZW1lbnQpO1xuICAgICAgY29uc3Qgbm9kZTogVHJlZU1hcE5vZGUgPSB7XG4gICAgICAgIGlkOiBzdXBlci5nZXRMYWJlbChlbGVtZW50KSxcbiAgICAgICAgc2l6ZTogbm9kZVZhbCxcbiAgICAgICAgdmFsdWU6IG5vZGVWYWwsXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgb3JpZ2luYWw6IGVsZW1lbnQsXG4gICAgICB9O1xuICAgICAgdGhpcy5hZGRGcmFtZShub2RlLmNoaWxkcmVuLCBlbGVtZW50LmNoaWxkcmVuLCBub2RlKTtcbiAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgIHByZXYuc2l6ZSArPSBub2RlLnNpemU7XG4gICAgICB9XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=