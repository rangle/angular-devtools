const mergeProperty = (mergeInProp, value) => {
    if (mergeInProp === undefined) {
        return value;
    }
    if (value === undefined) {
        return mergeInProp;
    }
    return mergeInProp + value;
};
const mergeDirective = (mergeIn, second) => {
    mergeIn.changeDetection = mergeProperty(mergeIn.changeDetection, second.changeDetection);
    Object.keys(mergeIn.lifecycle).forEach((hook) => {
        mergeIn.lifecycle[hook] = mergeProperty(mergeIn.lifecycle[hook], second.lifecycle[hook]);
    });
};
const mergeDirectives = (mergeIn, second) => {
    for (let i = 0; i < second.length; i++) {
        if (!mergeIn[i]) {
            mergeIn[i] = {
                children: [],
                directives: [],
            };
        }
        second[i].directives.forEach((d, idx) => {
            const mergeInDirective = mergeIn[i].directives[idx];
            if (mergeInDirective && mergeInDirective.name === d.name) {
                mergeDirective(mergeInDirective, d);
            }
            else {
                mergeIn[i].directives.push(d);
            }
        });
        mergeDirectives(mergeIn[i].children, second[i].children);
    }
};
const mergeFrame = (mergeIn, second) => {
    mergeIn.duration += second.duration;
    mergeIn.source = '';
    mergeDirectives(mergeIn.directives, second.directives);
};
export const mergeFrames = (frames) => {
    if (!frames || !frames.length) {
        return null;
    }
    const first = JSON.parse(JSON.stringify(frames[0]));
    for (let i = 1; i < frames.length; i++) {
        mergeFrame(first, frames[i]);
    }
    return first;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUtbWVyZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZGV2dG9vbHMvc3JjL2xpYi9kZXZ0b29scy10YWJzL3Byb2ZpbGVyL3JlY29yZGluZy90aW1lbGluZS9yZWNvcmQtZm9ybWF0dGVyL2ZyYW1lLW1lcmdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLGFBQWEsR0FBRyxDQUFDLFdBQStCLEVBQUUsS0FBeUIsRUFBRSxFQUFFO0lBQ25GLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtRQUM3QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3ZCLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLENBQUMsT0FBeUIsRUFBRSxNQUF3QixFQUFFLEVBQUU7SUFDN0UsT0FBTyxDQUFDLGVBQWUsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekYsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDOUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQXlCLEVBQUUsTUFBd0IsRUFBRSxFQUFFO0lBQzlFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUc7Z0JBQ1gsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osVUFBVSxFQUFFLEVBQUU7YUFDZixDQUFDO1NBQ0g7UUFDRCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN0QyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEQsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDeEQsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3JDO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUQ7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQXNCLEVBQUUsTUFBcUIsRUFBRSxFQUFFO0lBQ25FLE9BQU8sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNwQyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNwQixlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBdUIsRUFBd0IsRUFBRTtJQUMzRSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvZmlsZXJGcmFtZSwgRGlyZWN0aXZlUHJvZmlsZSwgRWxlbWVudFByb2ZpbGUgfSBmcm9tICdwcm90b2NvbCc7XG5cbmNvbnN0IG1lcmdlUHJvcGVydHkgPSAobWVyZ2VJblByb3A6IG51bWJlciB8IHVuZGVmaW5lZCwgdmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCkgPT4ge1xuICBpZiAobWVyZ2VJblByb3AgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtZXJnZUluUHJvcDtcbiAgfVxuICByZXR1cm4gbWVyZ2VJblByb3AgKyB2YWx1ZTtcbn07XG5cbmNvbnN0IG1lcmdlRGlyZWN0aXZlID0gKG1lcmdlSW46IERpcmVjdGl2ZVByb2ZpbGUsIHNlY29uZDogRGlyZWN0aXZlUHJvZmlsZSkgPT4ge1xuICBtZXJnZUluLmNoYW5nZURldGVjdGlvbiA9IG1lcmdlUHJvcGVydHkobWVyZ2VJbi5jaGFuZ2VEZXRlY3Rpb24sIHNlY29uZC5jaGFuZ2VEZXRlY3Rpb24pO1xuICBPYmplY3Qua2V5cyhtZXJnZUluLmxpZmVjeWNsZSkuZm9yRWFjaCgoaG9vaykgPT4ge1xuICAgIG1lcmdlSW4ubGlmZWN5Y2xlW2hvb2tdID0gbWVyZ2VQcm9wZXJ0eShtZXJnZUluLmxpZmVjeWNsZVtob29rXSwgc2Vjb25kLmxpZmVjeWNsZVtob29rXSk7XG4gIH0pO1xufTtcblxuY29uc3QgbWVyZ2VEaXJlY3RpdmVzID0gKG1lcmdlSW46IEVsZW1lbnRQcm9maWxlW10sIHNlY29uZDogRWxlbWVudFByb2ZpbGVbXSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY29uZC5sZW5ndGg7IGkrKykge1xuICAgIGlmICghbWVyZ2VJbltpXSkge1xuICAgICAgbWVyZ2VJbltpXSA9IHtcbiAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICAgIH07XG4gICAgfVxuICAgIHNlY29uZFtpXS5kaXJlY3RpdmVzLmZvckVhY2goKGQsIGlkeCkgPT4ge1xuICAgICAgY29uc3QgbWVyZ2VJbkRpcmVjdGl2ZSA9IG1lcmdlSW5baV0uZGlyZWN0aXZlc1tpZHhdO1xuICAgICAgaWYgKG1lcmdlSW5EaXJlY3RpdmUgJiYgbWVyZ2VJbkRpcmVjdGl2ZS5uYW1lID09PSBkLm5hbWUpIHtcbiAgICAgICAgbWVyZ2VEaXJlY3RpdmUobWVyZ2VJbkRpcmVjdGl2ZSwgZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZUluW2ldLmRpcmVjdGl2ZXMucHVzaChkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtZXJnZURpcmVjdGl2ZXMobWVyZ2VJbltpXS5jaGlsZHJlbiwgc2Vjb25kW2ldLmNoaWxkcmVuKTtcbiAgfVxufTtcblxuY29uc3QgbWVyZ2VGcmFtZSA9IChtZXJnZUluOiBQcm9maWxlckZyYW1lLCBzZWNvbmQ6IFByb2ZpbGVyRnJhbWUpID0+IHtcbiAgbWVyZ2VJbi5kdXJhdGlvbiArPSBzZWNvbmQuZHVyYXRpb247XG4gIG1lcmdlSW4uc291cmNlID0gJyc7XG4gIG1lcmdlRGlyZWN0aXZlcyhtZXJnZUluLmRpcmVjdGl2ZXMsIHNlY29uZC5kaXJlY3RpdmVzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBtZXJnZUZyYW1lcyA9IChmcmFtZXM6IFByb2ZpbGVyRnJhbWVbXSk6IFByb2ZpbGVyRnJhbWUgfCBudWxsID0+IHtcbiAgaWYgKCFmcmFtZXMgfHwgIWZyYW1lcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaXJzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZnJhbWVzWzBdKSk7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWVyZ2VGcmFtZShmaXJzdCwgZnJhbWVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59O1xuIl19