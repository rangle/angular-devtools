import { __decorate } from "tslib";
import { RecordFormatter } from '../record-formatter';
import memo from 'memo-decorator';
export class BarGraphFormatter extends RecordFormatter {
    formatFrame(frame) {
        const result = [];
        this.addFrame(result, frame.directives);
        return result.filter((element) => element.value > 0).sort((a, b) => b.value - a.value);
    }
    addFrame(nodes, elements, parents = []) {
        let timeSpent = 0;
        elements.forEach((element) => {
            // Possibly undefined because of
            // the insertion on the backend.
            if (!element) {
                console.error('Unable to insert undefined element');
                return;
            }
            timeSpent += this.addFrame(nodes, element.children, parents.concat(element));
            timeSpent += super.getValue(element);
            element.directives.forEach((dir) => {
                const innerNode = {
                    parents,
                    value: super.getDirectiveValue(dir),
                    label: dir.name,
                    original: element,
                };
                nodes.push(innerNode);
            });
        });
        return timeSpent;
    }
}
__decorate([
    memo({ cache: new WeakMap() })
], BarGraphFormatter.prototype, "formatFrame", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyZ3JhcGgtZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZGV2dG9vbHMvc3JjL2xpYi9kZXZ0b29scy10YWJzL3Byb2ZpbGVyL3JlY29yZGluZy90aW1lbGluZS9yZWNvcmQtZm9ybWF0dGVyL2JhcmdyYXBoLWZvcm1hdHRlci9iYXJncmFwaC1mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQVNsQyxNQUFNLE9BQU8saUJBQWtCLFNBQVEsZUFBK0I7SUFFcEUsV0FBVyxDQUFDLEtBQW9CO1FBQzlCLE1BQU0sTUFBTSxHQUFtQixFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQXFCLEVBQUUsUUFBMEIsRUFBRSxVQUE0QixFQUFFO1FBQ3hGLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDM0IsZ0NBQWdDO1lBQ2hDLGdDQUFnQztZQUNoQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztnQkFDcEQsT0FBTzthQUNSO1lBRUQsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzdFLFNBQVMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXJDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2pDLE1BQU0sU0FBUyxHQUFpQjtvQkFDOUIsT0FBTztvQkFDUCxLQUFLLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQztvQkFDbkMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNmLFFBQVEsRUFBRSxPQUFPO2lCQUNsQixDQUFDO2dCQUNGLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQS9CQztJQURDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUM7b0RBSzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjb3JkRm9ybWF0dGVyIH0gZnJvbSAnLi4vcmVjb3JkLWZvcm1hdHRlcic7XG5pbXBvcnQgeyBFbGVtZW50UHJvZmlsZSwgUHJvZmlsZXJGcmFtZSB9IGZyb20gJ3Byb3RvY29sJztcbmltcG9ydCBtZW1vIGZyb20gJ21lbW8tZGVjb3JhdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBCYXJncmFwaE5vZGUge1xuICBwYXJlbnRzOiBFbGVtZW50UHJvZmlsZVtdO1xuICB2YWx1ZTogbnVtYmVyO1xuICBsYWJlbDogc3RyaW5nO1xuICBvcmlnaW5hbDogRWxlbWVudFByb2ZpbGU7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXJHcmFwaEZvcm1hdHRlciBleHRlbmRzIFJlY29yZEZvcm1hdHRlcjxCYXJncmFwaE5vZGVbXT4ge1xuICBAbWVtbyh7IGNhY2hlOiBuZXcgV2Vha01hcCgpIH0pXG4gIGZvcm1hdEZyYW1lKGZyYW1lOiBQcm9maWxlckZyYW1lKTogQmFyZ3JhcGhOb2RlW10ge1xuICAgIGNvbnN0IHJlc3VsdDogQmFyZ3JhcGhOb2RlW10gPSBbXTtcbiAgICB0aGlzLmFkZEZyYW1lKHJlc3VsdCwgZnJhbWUuZGlyZWN0aXZlcyk7XG4gICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoKGVsZW1lbnQpID0+IGVsZW1lbnQudmFsdWUgPiAwKS5zb3J0KChhLCBiKSA9PiBiLnZhbHVlIC0gYS52YWx1ZSk7XG4gIH1cblxuICBhZGRGcmFtZShub2RlczogQmFyZ3JhcGhOb2RlW10sIGVsZW1lbnRzOiBFbGVtZW50UHJvZmlsZVtdLCBwYXJlbnRzOiBFbGVtZW50UHJvZmlsZVtdID0gW10pOiBudW1iZXIge1xuICAgIGxldCB0aW1lU3BlbnQgPSAwO1xuICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIC8vIFBvc3NpYmx5IHVuZGVmaW5lZCBiZWNhdXNlIG9mXG4gICAgICAvLyB0aGUgaW5zZXJ0aW9uIG9uIHRoZSBiYWNrZW5kLlxuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBpbnNlcnQgdW5kZWZpbmVkIGVsZW1lbnQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aW1lU3BlbnQgKz0gdGhpcy5hZGRGcmFtZShub2RlcywgZWxlbWVudC5jaGlsZHJlbiwgcGFyZW50cy5jb25jYXQoZWxlbWVudCkpO1xuICAgICAgdGltZVNwZW50ICs9IHN1cGVyLmdldFZhbHVlKGVsZW1lbnQpO1xuXG4gICAgICBlbGVtZW50LmRpcmVjdGl2ZXMuZm9yRWFjaCgoZGlyKSA9PiB7XG4gICAgICAgIGNvbnN0IGlubmVyTm9kZTogQmFyZ3JhcGhOb2RlID0ge1xuICAgICAgICAgIHBhcmVudHMsXG4gICAgICAgICAgdmFsdWU6IHN1cGVyLmdldERpcmVjdGl2ZVZhbHVlKGRpciksXG4gICAgICAgICAgbGFiZWw6IGRpci5uYW1lLFxuICAgICAgICAgIG9yaWdpbmFsOiBlbGVtZW50LFxuICAgICAgICB9O1xuICAgICAgICBub2Rlcy5wdXNoKGlubmVyTm9kZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGltZVNwZW50O1xuICB9XG59XG4iXX0=