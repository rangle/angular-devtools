export class RecordFormatter {
    getLabel(element) {
        const name = element.directives
            .filter((d) => d.isComponent)
            .map((c) => c.name)
            .join(', ');
        const attributes = [...new Set(element.directives.filter((d) => !d.isComponent).map((d) => d.name))].join(', ');
        return attributes === '' ? name : `${name}[${attributes}]`;
    }
    getValue(element) {
        let result = 0;
        element.directives.forEach((dir) => {
            result += this.getDirectiveValue(dir);
        });
        return result;
    }
    getDirectiveValue(directive) {
        let result = 0;
        let current = directive.changeDetection;
        if (current === undefined) {
            current = 0;
        }
        result += current;
        Object.keys(directive.lifecycle).forEach((key) => {
            const value = parseFloat(directive.lifecycle[key]);
            if (!isNaN(value)) {
                result += value;
            }
        });
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLWZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWRldnRvb2xzL3NyYy9saWIvZGV2dG9vbHMtdGFicy9wcm9maWxlci9yZWNvcmRpbmcvdGltZWxpbmUvcmVjb3JkLWZvcm1hdHRlci9yZWNvcmQtZm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxNQUFNLE9BQWdCLGVBQWU7SUFJbkMsUUFBUSxDQUFDLE9BQXVCO1FBQzlCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxVQUFVO2FBQzVCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQzthQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2QsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hILE9BQU8sVUFBVSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxVQUFVLEdBQUcsQ0FBQztJQUM3RCxDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQXVCO1FBQzlCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNmLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDakMsTUFBTSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxTQUEyQjtRQUMzQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQ3hDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN6QixPQUFPLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7UUFDRCxNQUFNLElBQUksT0FBTyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9DLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFByb2ZpbGUsIERpcmVjdGl2ZVByb2ZpbGUsIFByb2ZpbGVyRnJhbWUgfSBmcm9tICdwcm90b2NvbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxpbmVWaWV3PFQ+IHtcbiAgdGltZWxpbmU6IEFwcEVudHJ5PFQ+W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwRW50cnk8VD4ge1xuICBhcHA6IFRbXTtcbiAgdGltZVNwZW50OiBudW1iZXI7XG4gIHNvdXJjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdyYXBoTm9kZSB7XG4gIHRvb2xUaXA6IHN0cmluZztcbiAgc3R5bGU6IGFueTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlY29yZEZvcm1hdHRlcjxUPiB7XG4gIGFic3RyYWN0IGZvcm1hdEZyYW1lKGZyYW1lOiBQcm9maWxlckZyYW1lKTogVDtcbiAgYWJzdHJhY3QgYWRkRnJhbWUobm9kZXM6IFQgfCBUW10sIGVsZW1lbnRzOiBFbGVtZW50UHJvZmlsZVtdKTogbnVtYmVyIHwgdm9pZDtcblxuICBnZXRMYWJlbChlbGVtZW50OiBFbGVtZW50UHJvZmlsZSk6IHN0cmluZyB7XG4gICAgY29uc3QgbmFtZSA9IGVsZW1lbnQuZGlyZWN0aXZlc1xuICAgICAgLmZpbHRlcigoZCkgPT4gZC5pc0NvbXBvbmVudClcbiAgICAgIC5tYXAoKGMpID0+IGMubmFtZSlcbiAgICAgIC5qb2luKCcsICcpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbLi4ubmV3IFNldChlbGVtZW50LmRpcmVjdGl2ZXMuZmlsdGVyKChkKSA9PiAhZC5pc0NvbXBvbmVudCkubWFwKChkKSA9PiBkLm5hbWUpKV0uam9pbignLCAnKTtcbiAgICByZXR1cm4gYXR0cmlidXRlcyA9PT0gJycgPyBuYW1lIDogYCR7bmFtZX1bJHthdHRyaWJ1dGVzfV1gO1xuICB9XG5cbiAgZ2V0VmFsdWUoZWxlbWVudDogRWxlbWVudFByb2ZpbGUpOiBudW1iZXIge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGVsZW1lbnQuZGlyZWN0aXZlcy5mb3JFYWNoKChkaXIpID0+IHtcbiAgICAgIHJlc3VsdCArPSB0aGlzLmdldERpcmVjdGl2ZVZhbHVlKGRpcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGdldERpcmVjdGl2ZVZhbHVlKGRpcmVjdGl2ZTogRGlyZWN0aXZlUHJvZmlsZSk6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgbGV0IGN1cnJlbnQgPSBkaXJlY3RpdmUuY2hhbmdlRGV0ZWN0aW9uO1xuICAgIGlmIChjdXJyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnQgPSAwO1xuICAgIH1cbiAgICByZXN1bHQgKz0gY3VycmVudDtcbiAgICBPYmplY3Qua2V5cyhkaXJlY3RpdmUubGlmZWN5Y2xlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChkaXJlY3RpdmUubGlmZWN5Y2xlW2tleV0pO1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0ICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==