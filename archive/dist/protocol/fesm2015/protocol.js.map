{"version":3,"file":"protocol.js","sources":["../../../projects/protocol/src/lib/messages.ts","../../../projects/protocol/src/lib/message-bus.ts","../../../projects/protocol/src/lib/priority-aware-message-bus.ts","../../../projects/protocol/src/public-api.ts","../../../projects/protocol/src/protocol.ts"],"sourcesContent":["import { ViewEncapsulation } from '@angular/core';\n\nexport interface DirectiveType {\n  name: string;\n  id: number;\n}\n\nexport interface ComponentType {\n  name: string;\n  isElement: boolean;\n  id: number;\n}\n\nexport interface DevToolsNode<DirType = DirectiveType, CmpType = ComponentType> {\n  element: string;\n  directives: DirType[];\n  component: CmpType | null;\n  children: DevToolsNode<DirType, CmpType>[];\n  nativeElement?: Node;\n}\n\nexport enum PropType {\n  Number,\n  String,\n  Null,\n  Undefined,\n  Symbol,\n  HTMLNode,\n  Boolean,\n  BigInt,\n  Function,\n  Object,\n  Date,\n  Array,\n  Unknown,\n}\n\nexport interface Descriptor {\n  expandable: boolean;\n  value?: any;\n  editable: boolean;\n  type: PropType;\n  preview: string;\n}\n\nexport interface DirectivesProperties {\n  [name: string]: Properties;\n}\n\nexport interface DirectiveMetadata {\n  inputs: { [name: string]: string };\n  outputs: { [name: string]: string };\n  encapsulation: ViewEncapsulation;\n  onPush: boolean;\n}\n\nexport interface Properties {\n  props: { [name: string]: Descriptor };\n  metadata?: DirectiveMetadata;\n}\n\nexport type ElementPosition = number[];\n\nexport interface DirectivePosition {\n  element: ElementPosition;\n  directive?: number;\n}\n\nexport interface NestedProp {\n  name: string | number;\n  children: NestedProp[];\n}\n\nexport interface ComponentExplorerViewProperties {\n  [directive: string]: NestedProp[];\n}\n\nexport enum PropertyQueryTypes {\n  All,\n  Specified,\n}\n\nexport interface AllPropertiesQuery {\n  type: PropertyQueryTypes.All;\n}\n\nexport interface SelectedPropertiesQuery {\n  type: PropertyQueryTypes.Specified;\n  properties: ComponentExplorerViewProperties;\n}\n\nexport type PropertyQuery = AllPropertiesQuery | SelectedPropertiesQuery;\n\nexport interface ComponentExplorerViewQuery {\n  selectedElement: ElementPosition;\n  propertyQuery: PropertyQuery;\n}\n\nexport interface ComponentExplorerView {\n  forest: DevToolsNode[];\n  properties?: DirectivesProperties;\n}\n\nexport interface LifecycleProfile {\n  ngOnInit?: number;\n  ngOnDestroy?: number;\n  ngOnChanges?: number;\n  ngDoCheck?: number;\n  ngAfterContentInit?: number;\n  ngAfterContentChecked?: number;\n  ngAfterViewInit?: number;\n  ngAfterViewChecked?: number;\n}\n\nexport interface DirectiveProfile {\n  name: string;\n  isElement: boolean;\n  isComponent: boolean;\n  lifecycle: LifecycleProfile;\n  changeDetection?: number;\n}\n\nexport interface ElementProfile {\n  directives: DirectiveProfile[];\n  children: ElementProfile[];\n}\n\nexport interface ProfilerFrame {\n  source: string;\n  duration: number;\n  directives: ElementProfile[];\n}\n\nexport interface UpdatedStateData {\n  directiveId: DirectivePosition;\n  keyPath: string[];\n  newValue: any;\n}\n\nexport interface Route {\n  name: string;\n  hash: string | null;\n  path: string;\n  specificity: string | null;\n  handler: string;\n  data: any;\n  children?: Array<Route>;\n  isAux: boolean;\n}\n\nexport type Topic = keyof Events;\n\nexport interface Events {\n  handshake: () => void;\n  shutdown: () => void;\n  queryNgAvailability: () => void;\n  ngAvailability: (config: { version: string | undefined | boolean; devMode: boolean; ivy: boolean }) => void;\n\n  inspectorStart: () => void;\n  inspectorEnd: () => void;\n\n  getNestedProperties: (position: DirectivePosition, path: string[]) => void;\n  nestedProperties: (position: DirectivePosition, data: Properties, path: string[]) => void;\n\n  setSelectedComponent: (position: ElementPosition) => void;\n  getRoutes: () => void;\n  updateRouterTree: (routes: Route[]) => void;\n\n  componentTreeDirty: () => void;\n  getLatestComponentExplorerView: (query?: ComponentExplorerViewQuery) => void;\n  latestComponentExplorerView: (view: ComponentExplorerView) => void;\n\n  updateState: (value: UpdatedStateData) => void;\n\n  startProfiling: () => void;\n  stopProfiling: () => void;\n  sendProfilerChunk: (results: ProfilerFrame) => void;\n  profilerResults: (results: ProfilerFrame) => void;\n\n  createHighlightOverlay: (position: ElementPosition) => void;\n  removeHighlightOverlay: () => void;\n\n  highlightComponent: (id: number) => void;\n  selectComponent: (id: number) => void;\n  removeComponentHighlight: () => void;\n\n  enableTimingAPI: () => void;\n  disableTimingAPI: () => void;\n}\n","export type Parameters<F> = F extends (...args: infer T) => any ? T : never;\n\nexport abstract class MessageBus<T> {\n  abstract on<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract once<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract emit<E extends keyof T>(topic: E, args?: Parameters<T[E]>): boolean;\n  abstract destroy(): void;\n}\n","import { Topic, Events } from './messages';\nimport { MessageBus } from './message-bus';\n\ntype ThrottleTopicDuration = {\n  [method in Topic]?: number;\n};\n\ntype ThrottledTopics = {\n  [method in Topic]?: boolean;\n};\n\ntype TopicsInProgress = {\n  [method in Topic]?: boolean;\n};\n\nconst THROTTLE_METHODS: ThrottleTopicDuration = {\n  getLatestComponentExplorerView: 100,\n};\n\ntype TopicBlockSequence = {\n  [method in Topic]?: Topic[];\n};\n\n// We can't refresh the view until we've received\n// a response with the latest nested properties.\nconst TOPIC_BLOCK_SEQUENCE: TopicBlockSequence = {\n  getLatestComponentExplorerView: ['getNestedProperties'],\n};\n\ntype TopicSequence = {\n  [method in Topic]?: Topic;\n};\n\nconst TOPIC_RESPONSE: TopicSequence = {\n  getNestedProperties: 'nestedProperties',\n};\n\nconst TOPIC_REQUEST: TopicSequence = {\n  nestedProperties: 'getNestedProperties',\n};\n\nexport class PriorityAwareMessageBus extends MessageBus<Events> {\n  private _throttled: ThrottledTopics = {};\n  private _inProgress: TopicsInProgress = {};\n\n  constructor(private _bus: MessageBus<Events>, private _setTimeout: typeof setTimeout = setTimeout) {\n    super();\n  }\n\n  on<E extends Topic>(topic: E, cb: Events[E]): void {\n    const self = this;\n    return this._bus.on(topic, function (): void {\n      cb.apply(this, arguments);\n      self._afterMessage(topic);\n    });\n  }\n\n  once<E extends Topic>(topic: E, cb: Events[E]): void {\n    const self = this;\n    return this._bus.once(topic, function (): void {\n      cb.apply(this, arguments);\n      self._afterMessage(topic);\n    });\n  }\n\n  emit<E extends Topic>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._throttled[topic]) {\n      return false;\n    }\n    if (TOPIC_RESPONSE[topic]) {\n      this._inProgress[topic] = true;\n    }\n    const blockedBy = TOPIC_BLOCK_SEQUENCE[topic];\n    if (blockedBy) {\n      // The source code here is safe.\n      // TypeScript type inference ignores the null check here.\n      // tslint:disable-next-line: no-non-null-assertion\n      for (const blocker of blockedBy!) {\n        if (this._inProgress[blocker]) {\n          return false;\n        }\n      }\n    }\n    if (THROTTLE_METHODS[topic]) {\n      this._throttled[topic] = true;\n      this._setTimeout(() => (this._throttled[topic] = false), THROTTLE_METHODS[topic]);\n    }\n    return this._bus.emit(topic, args);\n  }\n\n  destroy(): void {\n    this._bus.destroy();\n  }\n\n  private _afterMessage(topic: Topic): void {\n    const request = TOPIC_REQUEST[topic];\n    if (!request) {\n      return;\n    }\n    if (this._inProgress[request]) {\n      this._inProgress[request] = false;\n    }\n  }\n}\n","/*\n * Public API Surface of protocol\n */\n\nexport * from './lib/messages';\nexport * from './lib/message-bus';\nexport * from './lib/priority-aware-message-bus';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}